<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Agent on 雨的味道</title><link>https://reatang.com/tags/agent/</link><description>Recent content in Agent on 雨的味道</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 07 May 2025 16:42:08 +0800</lastBuildDate><atom:link href="https://reatang.com/tags/agent/index.xml" rel="self" type="application/rss+xml"/><item><title>[AI Agent]开发智能体的26个关键要点</title><link>https://reatang.com/p/26-key-points-for-developing-agents/</link><pubDate>Wed, 07 May 2025 16:42:08 +0800</pubDate><guid>https://reatang.com/p/26-key-points-for-developing-agents/</guid><description>&lt;h2 id="第一部分观念转变与认知升级">第一部分：观念转变与认知升级
&lt;/h2>&lt;ul>
&lt;li>1） AI Agent不是员工，而是 SOP (标准作业程序) 的延伸： 不要将 AI Agent视为自动化的替代品或员工的复制品。它们更多的是流程的具象化，每个Agent负责执行一个或少数几个 SOP。&lt;/li>
&lt;li>2） 从良好的文档化流程 (SOP) 开始： 训练Agent之前，先梳理并优化现有的 SOP。清晰的 SOP 是训练Agent的基础，能显著提高训练效率和Agent的可靠性。&lt;/li>
&lt;li>3） 企业主应委托 AI Agent开发者，而非亲自构建： 即使未来出现“一键生成Agent”的工具，专业的 AI Agent开发者仍然不可或缺。他们能够确定构建哪些Agent，并能最大化Agent的价值，正如无代码工具普及后，反而涌现了大量的自动化工程师一样。&lt;/li>
&lt;li>4） 咨询的重要性：了解客户真正的需求： 企业主可能对 AI Agent有自己的想法，但这些想法未必是最优的。通过咨询，深入了解客户的业务流程和痛点，才能找到更有价值的自动化机会。通过客户旅程绘制，可以更有效地识别潜在的自动化机会，选择更适合的Agent构建目标。&lt;/li>
&lt;li>5） Agent数量不宜过多，精简至上： 过多的Agent会增加系统的复杂性，导致维护困难、调试困难、成本上升和响应时间延长。优先构建一个能尽快交付价值的最简化Agent，逐步迭代和扩展。&lt;/li>
&lt;/ul>
&lt;h2 id="第二部分数据提示工程与集成">第二部分：数据、提示工程与集成
&lt;/h2>&lt;ul>
&lt;li>6） 数据驱动，更要将数据与行动相结合： 数据科学的 “GIGO”（garbage in, garbage out）原则同样适用于 AI Agent。更重要的是，将数据与相关行动结合，例如将知识库与 Facebook API 相结合，可以产生更大的价值。同时，要确保收集内外部数据以提升Agent性能。&lt;/li>
&lt;li>7） 提示工程是一门艺术，示例、顺序、迭代至关重要： 提示工程至关重要，它已经成为了一个职业。撰写提示如同撰写博客或论文，需要仔细斟酌每一个词语。提供充足的示例，注意句子和段落的顺序，并不断迭代和测试。最重要的部分放在指令的末尾。&lt;/li>
&lt;li>8） 集成与能力同等重要： Agent的集成性决定了用户的使用便捷性，便捷性决定了用户的使用意愿，所以决定了Agent能否交付实际价值。将Agent集成到员工日常使用的系统中，例如 Zendesk，至关重要。&lt;/li>
&lt;/ul>
&lt;h2 id="第三部分技术细节与可靠性保障">第三部分：技术细节与可靠性保障
&lt;/h2>&lt;ul>
&lt;li>9） Agent可靠性问题由开发者负责： 如果Agent不可靠，这不是Agent的问题，而是开发人员的问题。Pydantic 数据验证库可以用于验证Agent的输入和输出，确保Agent不会执行错误的操作。可以重点关注如何借助 Python 和相关框架来实现可靠性。&lt;/li>
&lt;li>10） 工具是 AI Agent的核心组件：指令、知识与行动缺一不可： 工具是Agent提供价值的方式。价值是通过行动产生，而不是通过响应产生。学会构建和组织工具，是构建各种用例Agent的关键。&lt;/li>
&lt;li>11） 每个Agent的工具数量不宜超过四到六种： 过多的工具会导致Agent产生幻觉、混淆工具的使用，可以通过分离Agent来解决。&lt;/li>
&lt;li>12） 模型成本不再是核心关注： 如果用例有意义，通常从使用 AI Agent中可以获得巨大的投资回报。&lt;/li>
&lt;/ul>
&lt;ol start="13">
&lt;li>客户更关心价值，而非模型选择： 企业更关心Agent能否提供价值、数据是否安全，对底层模型并不敏感。Azure OpenAI 等私有部署方案可以满足客户对数据隐私的要求。&lt;/li>
&lt;/ol>
&lt;h2 id="第四部分商业模式与扩展策略">第四部分：商业模式与扩展策略
&lt;/h2>&lt;ul>
&lt;li>14） 价值被确立之前，不要自动化： 先手动验证流程的价值和可行性，再进行自动化，避免不必要的风险和投入。&lt;/li>
&lt;li>15） 不要只考虑用例，要考虑 ROI（投资回报率）： 采用公式计算 ROI，关注对业务最有价值的部分。ROI 公式：(速率 * 工时 - 运营成本) / 开发成本。&lt;/li>
&lt;li>16） Agent开发是一个数据科学竞赛的迭代过程： 尝试不同的架构，对比结果，并从中学习，不断优化Agent。&lt;/li>
&lt;li>17） 使用分而治之的方法：逐步交付解决方案： 将复杂问题分解为可管理的任务，优先交付独立工作的Agent，获得客户确认后再继续构建整个系统。按部门进行自动化也是一个不错的策略。&lt;/li>
&lt;li>18） 评估至关重要（尤其是对于大型企业）： 评估可以帮助跟踪 KPI 和性能，不断改进解决方案。对于小型企业，评估可能并非必需。&lt;/li>
&lt;li>19） 两种Agent：Agent与工作流： 结合标准工作流程和自动化与 AI Agent。AI 驱动的步骤嵌入到结构化的工作流程中。&lt;/li>
&lt;/ul>
&lt;h2 id="第五部分未来趋势与注意事项">第五部分：未来趋势与注意事项
&lt;/h2>&lt;ul>
&lt;li>20） Agent需要适应反馈： 确保Agent不仅能修改环境，还能分析结果、了解行动的影响。&lt;/li>
&lt;li>21） 不要围绕限制构建：拥抱变化、面向未来： 不要基于当前的技术限制构建Agent，要预见到技术进步的可能性。&lt;/li>
&lt;li>22） 部署Agent比构建Agent更难： 需要花费较长的时间整合到客户的流程中，搭建一个平台以便支持灵活部署。&lt;/li>
&lt;li>23） 放弃瀑布模型，拥抱敏捷开发： Agent项目具有高度的灵活性，需要不断演进。采用订阅模式，与客户建立合作伙伴关系。&lt;/li>
&lt;li>24） 在关键任务Agent中加入人工环节： 对于容错率低的Agent，先加入人工审核环节，待Agent成熟后再取消人工干预。比如先让客户在notion审核营销活动，然后逐渐过渡到自动化。&lt;/li>
&lt;li>25） 2025 年是垂直 AI Agent的年份： 专注于特定领域和用例的Agent更易扩展、更具价值。可以逐渐从水平Agent过渡到垂直Agent。&lt;/li>
&lt;li>26） Agent不会取代人，而是帮助企业扩大规模： 关注扩大规模和提升价值，而不是裁员。&lt;/li>
&lt;/ul></description></item></channel></rss>